generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Status {
  PENDING
  APPROVED
  CANCELLED
  REJECTED
  COMPLETED
}

enum ItemStatus {
  AVAILABLE
  UNAVAILABLE
}

model User {
  id          String   @id @default(uuid())
  firstName   String
  lastName    String
  email       String   @unique
  phoneNumber String?
  password    String
  imageUrl    String?
  role        Role     @default(USER)
  createdAt   DateTime @default(now())
  modifiedAt  DateTime @updatedAt
  Event       Event[]
}

model Event {
  id                 String   @id @default(uuid())
  title              String
  organizer          String?
  description        String
  category           String
  expectedPax        Int
  date               DateTime
  startTime          DateTime
  endTime            DateTime
  imageUrl           String?
  hasCleaningFee     Boolean
  additionalHours    Int
  venue              String
  additionalServices String[]
  additionalNotes    String?
  status             Status   @default(PENDING)
  createdAt          DateTime @default(now())
  modifiedAt         DateTime @updatedAt

  user       User               @relation(fields: [userId], references: [id])
  userId     String
  catering   CateringSelection?
  cateringId String?
}

model CateringSelection {
  id                 String                @id @default(uuid())
  expectedPax        Int
  totalAmount        Float
  numberOfMainDishes Int
  mainDishPackage    MainDishPackage       @relation(fields: [packageId], references: [id])
  mainDishes         CateringMainDish[] // Relation to junction table
  pickASnackCorner   CateringSnackCorner[] // Relation to junction table
  addOns             CateringAddOn[] // Relation to junction table

  event     Event  @relation(fields: [eventId], references: [id])
  eventId   String @unique
  packageId String
}

model MainDishPackage {
  id                  String              @id @default(uuid())
  name                String
  numOfDishesCategory Int
  price               Float
  minPax              Int
  maxPax              Int
  createdAt           DateTime            @default(now())
  modifiedAt          DateTime            @updatedAt
  CateringSelection   CateringSelection[]
}

// Junction Table for CateringSelection and MainDishDetails
model CateringMainDish {
  id                  String            @id @default(uuid())
  cateringSelection   CateringSelection @relation(fields: [cateringSelectionId], references: [id])
  mainDishDetail      MainDishDetails   @relation(fields: [mainDishDetailId], references: [id])
  cateringSelectionId String
  mainDishDetailId    String
}

// Junction Table for CateringSelection and PickASnackCornerDetails
model CateringSnackCorner {
  id                  String                  @id @default(uuid())
  cateringSelection   CateringSelection       @relation(fields: [cateringSelectionId], references: [id])
  pickASnackCorner    PickASnackCornerDetails @relation(fields: [pickASnackCornerId], references: [id])
  cateringSelectionId String
  pickASnackCornerId  String
}

// Junction Table for CateringSelection and CateringAddOnsDetails
model CateringAddOn {
  id                  String                @id @default(uuid())
  cateringSelection   CateringSelection     @relation(fields: [cateringSelectionId], references: [id])
  cateringAddOnDetail CateringAddOnsDetails @relation(fields: [addOnDetailId], references: [id])
  cateringSelectionId String
  addOnDetailId       String
}

model PackagesDetails {
  id          String   @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  modifiedAt  DateTime @updatedAt
}

model InclusionsDetails {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  modifiedAt  DateTime @updatedAt
}

model MainDishDetails {
  id               String             @id @default(uuid())
  name             String
  category         String
  description      String?
  status           ItemStatus         @default(AVAILABLE)
  createdAt        DateTime           @default(now())
  modifiedAt       DateTime           @updatedAt
  CateringMainDish CateringMainDish[] // Relation to junction table
}

model PickASnackCornerDetails {
  id                  String                @id @default(uuid())
  name                String
  description         String?
  category            String
  status              ItemStatus            @default(AVAILABLE)
  createdAt           DateTime              @default(now())
  modifiedAt          DateTime              @updatedAt
  CateringSnackCorner CateringSnackCorner[] // Relation to junction table
}

model CateringAddOnsDetails {
  id            String          @id @default(uuid())
  name          String
  category      String
  description   String?
  price         Float
  paxCapacity   Int?
  serviceHours  Int?
  status        ItemStatus      @default(AVAILABLE)
  createdAt     DateTime        @default(now())
  modifiedAt    DateTime        @updatedAt
  CateringAddOn CateringAddOn[] // Relation to junction table
}
